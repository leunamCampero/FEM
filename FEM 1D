
import numpy as np
import matplotlib.pyplot as plt
from scipy import linalg
from scipy import integrate


class FEM_1D:
    
    def __init__(self, p, r, q, lf_x, lf_t, lf_v, r_x, r_t, r_v, f, n, alp, bet, gamma, gammb):
        self.my_p = p
        self.my_r = r
        self.my_q = q
        self.D_lf = {}
        self.D_r = {}
        self.D_lf["leftbdr_x"] = lf_x
        self.D_lf["leftbdr_type"] = lf_t
        self.D_lf["leftbdr_value"] = lf_v
        self.D_r["rightbdr_x"] = r_x
        self.D_r["rightbdr_type"] = r_t
        self.D_r["rightbdr_value"] = r_v
        self.my_f = f
        self.n = n
        self.alp = alp
        self.bet = bet
        self.gamma = gamma
        self.gammb = gammb
    
    def dic_phi(self):
        D = {}
        q =  np.linspace(self.D_lf["leftbdr_x"] , self.D_r["rightbdr_x"], self.n+1, endpoint=True)
        for i in range(len(q)):
            D[i] = q[i]
        return D
    
    def FEM(self):
        x_1 = np.linspace(self.D_lf["leftbdr_x"], self.D_r["rightbdr_x"], self.n+1, endpoint=True)
        A = np.zeros((self.n + 1, self.n + 1))
        for i in range(self.n):
            localmat = assembleLocalMatrix_d(self.my_p, self.my_r, self.my_q, 1, x_1[i], x_1[i + 1])
            A[i:i+2,i:i+2] = A[i:i+2,i:i+2] + localmat
        rhs = np.zeros((self.n + 1, 1))
        for i in range(self.n):
            localrhs = assembleLocalRhs(x_1[i], x_1[i + 1], self.my_f)
            rhs[i:i+2] = rhs[i:i+2] + localrhs
        if (self.D_lf["leftbdr_type"] == 'Dirichlet'):
            A[0,:] = 0
            A[0,0] = 1
            rhs[0] = self.D_lf["leftbdr_value"]
            aux = np.zeros((self.n,1))
            for i in range(self.n):
                aux[i,0] = A[1:self.n+1,0][i]
            rhs[1:self.n+1] = rhs[1:self.n+1] - self.D_lf["leftbdr_value"]*aux          
            A[1:self.n+1,0] = 0
        if (self.D_lf["leftbdr_type"] == 'Neumann'):
            rhs[0] = rhs[0] + self.my_p(self.D_lf["leftbdr_x"])*self.D_lf["leftbdr_value"]
        else:
            rhs[0] = rhs[0] + (-self.gamma/self.bet)*self.my_p(self.D_lf["leftbdr_x"])
            A[0,0] = A[0,0] + (-self.alp/self.bet)*self.my_p(self.D_lf["leftbdr_x"])
        if (self.D_r["rightbdr_type"] == 'Dirichlet'):
            A[self.n,:] = 0
            A[self.n,self.n] = 1
            rhs[self.n] = self.D_r["rightbdr_value"]
            aux = np.zeros((self.n,1))
            for i in range(self.n):
                aux[i,0] = A[0:self.n + 1 ,self.n][i]
            rhs[0:self.n] = rhs[0:self.n] - self.D_r["rightbdr_value"]*aux
            A[0:self.n,self.n] = 0
        if (self.D_lf["leftbdr_type"] == 'Neumann'):
            rhs[self.n] = rhs[self.n] + self.my_p(self.D_r["rightbdr_x"])*self.D_r["rightbdr_x"]
        else:
            rhs[self.n] = rhs[self.n] + (self.gammb/self.bet)*self.my_p(self.D_r["rightbdr_x"])
            A[self.n,self.n] = A[self.n,self.n] + (self.alp/self.bet)*self.my_p(self.D_r["rightbdr_x"])
        N = linalg.pinv(A)
        return N.dot(rhs)
    
    def plot_FEM(self, solution):
        r = self.FEM().transpose()[0]
        q1 =  np.linspace(self.D_lf["leftbdr_x"] , self.D_r["rightbdr_x"], 100, endpoint=True)
        q2 = np.linspace(self.D_lf["leftbdr_x"] ,self.D_r["rightbdr_x"],self.n+1,endpoint=True) 
        plt.plot(q1,eval_f(solution,q1))
        plt.plot(q2, r)
        v = np.linspace(self.D_lf["leftbdr_x"] , self.D_r["rightbdr_x"], self.n*100, endpoint=True)
        Dp = self.dic_phi()
        nn = len(list(Dp.keys()))
        for i in range(nn):
            k = []
            c = 0
            for j in v:
                if (i == 0):
                    k.append(phi_1(ex = j, x_i = Dp[i], r = i, ln = nn, x_i_p_1 = Dp[i+1], ep = r[i]))
                if (1 <= i) and (i < nn-1):
                    k.append(phi_1(ex = j, x_i = Dp[i], r = i, ln = nn, x_i_l_1 = Dp[i-1], x_i_p_1 = Dp[i+1], ep = r[i]))
                if (i == nn-1):
                    k.append(phi_1(ex = j, x_i = Dp[i], r = i, ln = nn, x_i_l_1 = Dp[i-1], ep = r[i]))
                c = c + 1
            plt.plot(v, k)
        return plt.show()
    
    def plot_FEM_ws(self):
        q2 = np.linspace(self.D_lf["leftbdr_x"] ,self.D_r["rightbdr_x"],self.n+1,endpoint=True) 
        r = self.FEM().transpose()[0]
        plt.plot(q2, r)
        return plt.show()
    
    
def phi_1(**lv):
    v = list(lv.values())
    if (v[2] == 0):
        if (v[1] <= v[0]) and (v[0] < v[4]):
            return v[5]*(v[4]-v[0])/(v[4]-v[1])
        if (v[4] <= v[0]):
            return 0
    if (1 <= v[2]) and (v[2] < v[3]-1):
        if (v[0] < v[4]):
            return 0
        if (v[4] <= v[0]) and (v[0] < v[1]):
            return v[6]*(v[0]-v[4])/(v[5]-v[1])
        if (v[1] <= v[0]) and (v[0] < v[5]):
            return v[6]*(v[5]-v[0])/(v[5]-v[1])
        if (v[5] <= v[0]):
            return 0
    if (v[2] == v[3]-1):
        if (v[0] < v[4]):
            return 0
        if (v[4] <= v[0]) and (v[0] < v[1]):
            return v[5]*(v[0]-v[4])/(v[1]-v[4])
        
def solution(x):
    return np.sin(x)

def assembleLocalMatrix_d(my_p, my_r, my_q, d, x_i, x_i_p_1):
    n = 2
    M = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            c1 = integrate.quadrature(m_l(my_p, m_l(df_sha_f(d, i, x_i, x_i_p_1), df_sha_f(d,j, x_i, x_i_p_1))), x_i, x_i_p_1)[0]
            c2 = integrate.quadrature(m_l(my_r, m_l(df_sha_f(d, i, x_i, x_i_p_1), sha_f(d,j, x_i, x_i_p_1))), x_i, x_i_p_1)[0]
            c3 = integrate.quadrature(m_l(my_q, m_l(sha_f(d, i, x_i, x_i_p_1), sha_f(d,j, x_i, x_i_p_1))), x_i, x_i_p_1)[0]
            M[i,j] = c1 + c2 + c3
    return M

def assembleLocalRhs(a,b,f):
    localrhs = []
    g1 = lambda x: f(x)*(b-x)/(b-a)
    c1 = integrate.quadrature(g1, a, b)
    g2 = lambda x: f(x)*(x-a)/(b-a)
    c2 = integrate.quadrature(g2, a, b)
    localrhs.append(c1[0])
    localrhs.append(c2[0])
    return np.transpose([np.array(localrhs)])

def me(u,v):
    w = []
    for i in range(len(u)):
        w.append(u[i]*v[i])
    return np.array(w)

def my_f(x):
    return (1+x)*(np.sin(x)) - np.cos(x) + (np.cos(x))**2 + (x**2)*(np.sin(x))

def my_p(x):
    return (1 + x)

def my_r(x):
    return np.cos(x)

def my_q(x):
    return x**2
            
def eval_f(f, xs):
    ans = []
    for x in xs:
        ans.append(f(x))
    return np.transpose([np.array(ans)])

def sha_f(d, d_1, x_i, x_i_p_1):
    if (d == 1):
        '''linear base function'''
        if (d_1 == 0):
            f_1_1 = lambda x: (x_i_p_1 - x)/(x_i_p_1 - x_i)
            return  f_1_1
        if (d_1 == 1):
            f_1_2 = lambda x: (x - x_i)/(x_i_p_1 - x_i)               
            return f_1_2
        
def df_sha_f(d, d_1, x_i, x_i_p_1):
    if (d == 1):
        if (d_1 == 0):
            f_1_1 = lambda x: -1/(x_i_p_1-x_i)
            return f_1_1
        if (d_1 == 1):
            f_1_2 = lambda x: 1/(x_i_p_1-x_i)
            return f_1_2
        
def m_l(f_1, f_2):
    mf = lambda x: f_1(x)*f_2(x)
    return mf

'''
FEM 1D
'''
n = 30


lf_x = 1
lf_t = "MBC"
lf_v = 0

D_r = {}
r_x = 4
r_t = "MBC"
r_v = 0

alf = 3
bet = 4
gamma = alf*(np.sin(lf_x)) + bet*(np.cos(lf_x))
gammb = alf*(np.sin(r_x)) + bet*(np.cos(r_x))

v = FEM_1D(my_p, my_r, my_q, lf_x, lf_t, lf_v, r_x, r_t, r_v, my_f, n, alf, bet, gamma, gammb)
print(v.FEM())
v.plot_FEM(solution)
