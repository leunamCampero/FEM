"""
Created on Sat Feb 12 17:17:05 2022

@author: mcamperojurado

References:
    
1.- A Tchebychefian Extension Of Multidegree B-Splines: Algorithmic Computation and Properties.

2.- A General Class of C1 Smooth Rational Splines: Application to Construction of Exact Ellipses and Ellipsoids.

3.- Approximation Theory XV: San Antonio 2016. Generalized B-Splines in Isogeometric Analysis 
Carla Manni, Fabio Roman and Hendrik Speleers pg 239.

"""


import matplotlib.pyplot as plt
import numpy as np
import scipy.integrate as integrate
import scipy.special
# from math import isclose


def nf(r, p, m):
    '''
    Compute dimension of S_{r}^{p}(Delta) 
    Read Book**1 pg 5, Proposition 2.6
    '''
    psi = sum((r[i] + 1) for i in range(1, m))
    theta = sum((p[i] + 1) for i in range(m))
    return theta - psi

def uv(Delta, p, r, m):
    '''
    Create knot vector u 
    Read Book**1 pg 6, eq (3.1a)
    '''
    u = []
    for i in range(m):
        for j in range(p[i] - r[i]):
            u.append(Delta[i])
    return u

def vv(Delta, p, r, m):
    '''
    Create knot vector u 
    Read Book**1 pg 6, eq (3.1b)
    '''
    v = []
    for i in range(m):
        for j in range(p[i] - r[i+1]):
            v.append(Delta[i + 1])
    return v
    
def inv_f(x, x_i_1, x_i):
    assert x_i - x_i_1 > 0, '[x_i_1, x_i] is not an interval'
    return (x-x_i_1)/(x_i-x_i_1)

def mu_u(i, p, r):
    assert len(p) + 1> i, 'i have to be less than the length of p (See: Book**1 pg 7)'
    return 0 if i == 0 else sum((p[i]-r[j]) for j in range(i))

def mu_v(i, p, r):
    assert len(p) + 1> i, 'i have to be less than the length of p (See: Book**1 pg 7)'
    return 0 if i == 0 else sum((p[i]-r[j+1]) for j in range(i-1))

def maxu(u, k):
    '''
    Create max{l >= k: u_{k} = u_{k+l}} definition 3.2 Book**1
    '''
    a = len(u)
    if (k == (a - 1)):
        return 0
    else:
        c = 0
        for i in range(k+1, a):
            if (u[k] == u[i]):
                c = c + 1
        return c
    
def maxv(v, k):
    '''
    Create max{l >= k: v_{k} = v_{k-l}} definition 3.2 Book**1
    '''
    if (k == 0):
        return 0
    else:
        c = 0
        for i in range(k-1, 0, -1):
            if (v[k] == v[i]):
                c = c + 1
        return c
    
def fpu(u, k, p, Delta):
    '''
    Create p_{i + 1} definition 3.2 Book**1
    '''
    c = 0
    for j in Delta:
        if (j == u[k]):
            i = c
        c = c + 1
    return p[i]

def fpv(u, k, p, Delta):
    '''
    Create p_{j} definition 3.2 Book**1
    '''
    c = 0
    for i in Delta:
        if (i == u[k]):
            j = c
        c = c + 1
    return p[j - 1]

def ruk(r, p, m, Delta):
    '''
    Create r_{u}(k) 
    Read Book**1 pg 7, eq (3.2)
    '''
    ru_k = []
    n = nf(r, p, m)
    u = uv(Delta, p, r, m)
    for k in range(n):
        # print(maxu(u, k))
        ru_k.append(fpu(u, k, p, Delta)-1-maxu(u, k))
    return ru_k

def rvk(r, p, m, Delta):
    '''
    Create r_{v}(k) 
    Read Book**1 pg 7, eq (3.2)
    '''
    rv_k = []
    n = nf(r, p, m)
    v = vv(Delta, p, r, m)
    for k in range(n):
        # print(maxu(u, k))
        rv_k.append(fpv(v, k, p, Delta)-1-maxv(v, k))
    return rv_k
        
def G_B_S_Trig(xh, q, j, x_i_1, x_i, w):
    '''
    The generalized Bernstein basis for the trigonometric 
    space defined on [0, 1], see Book**1 pg 20 Example 7.6.
    '''
    assert q > 0, 'q have to be greater than 0, See Book**1 pg 20'
    x = inv_f(xh, x_i_1, x_i)
    if (q == 1):
        if (j == 0):
            return np.sin(w*(1-x))/np.sin(w)
        else:
            return np.sin(w*x)/np.sin(w)
    elif (q == 2):
        if (j == 0):
            return (1-np.cos(w*(1-x)))/(1-np.cos(w))
        elif (j == 1):
            return (np.cos(w*(1-x))+np.cos(w*x)-np.cos(w)-1)/(1-np.cos(w))
        else:
            return (1-np.cos(w*x))/(1-np.cos(w))
    else:
        if (j == 0):
            b_0_q_1 = integrate.quad(lambda y: G_B_S_Trig(y, q-1, 0, 0, 1, w), 0, 1)[0]
            return 1 - integrate.quad(lambda y: (1/b_0_q_1)*G_B_S_Trig(y, q-1, 0, 0, 1, w), 0, x)[0]
        elif (0 < j < q) and (q > 1):
            b_j_1_q_1 = integrate.quad(lambda y: G_B_S_Trig(y, q-1, j-1, 0, 1, w), 0, 1)[0]
            b_j_q_1 = integrate.quad(lambda y: G_B_S_Trig(y, q-1, j, 0, 1, w), 0, 1)[0]
            s1 = integrate.quad(lambda y: (1/b_j_1_q_1)*G_B_S_Trig(y, q-1, j-1, 0, 1, w), 0, x)[0]
            s2 = integrate.quad(lambda y: (1/b_j_q_1)*G_B_S_Trig(y, q-1, j, 0, 1, w), 0, x)[0]
            return s1 - s2
        else:
            b_q_1_q_1 = integrate.quad(lambda y: G_B_S_Trig(y, q-1, q-1, 0, 1, w), 0, 1)[0]
            return integrate.quad(lambda y: (1/b_q_1_q_1)*G_B_S_Trig(y, q-1, q-1, 0, 1, w), 0, x)[0]
        
        
def k_th_diff_G_B_S(k, x, q, j, x_i_1, x_i, w, eps):
    '''
    Function to obtain an aproximation of the k-th derivative of f (the G_B_S_Trig)
    
    If k = 0
        return f
    if k = 1
        f'(x) = lim (f(x+h)-f(x))/h
                h-->0
    if k = 2 
        f^{(n)}(x) = lim   (1/h^{n}) sum((-1)^{k+i})(bin(k, i)) f(x + ih)
                     h-->0
    '''
    if (k == 0):
        return G_B_S_Trig(x, q, j, x_i_1, x_i, w)
    if (k == 1):
        return (G_B_S_Trig(x + eps, q, j, x_i_1, x_i, w)-G_B_S_Trig(x, q, j, x_i_1, x_i, w))/eps
    if (k >= 2):
        return (1/(eps**k))*sum(bin_(k, i)*G_B_S_Trig(x + i*eps, q, j, x_i_1, x_i, w) for i in range(k + 1))
      
        
def bin_(n, k):
    '''
    Function to compute the binomial coefficient times (-1)^{k+n}
    See Function k_th_diff_G_B_S
    '''
    return ((-1)**(k+n))*scipy.special.binom(n, k)
        
def jump_xi_k(k, x, q, j, x_i_1, x_i, w, eps):
    left_D = 0
    right_D = 0
    if (x_i_1 <= x - eps <= x_i):
        left_D = k_th_diff_G_B_S(k, x, q, j, x_i_1, x_i, w, eps)
    if (x_i_1 <= x + eps <= x_i):
        right_D = k_th_diff_G_B_S(k, x, q, j, x_i_1, x_i, w, eps)
    # print(left_D, right_D)
    return left_D - right_D

def plot_algebraic_B_Spline(p, x_i_1, x_i, w, lt):
    assert p > 0, 'p have to be greater than 0, See Book**1 pg 20'
    xc = np.linspace(x_i_1, x_i, lt, endpoint=True)
    for q in range(p+1):
        yc = []
        for i in range(len(xc)):
            yc.append(G_B_S_Trig(xc[i], p, q, x_i_1, x_i, w))
        plt.plot(xc, yc)
    return plt.show()

def phi_i(x, x1, x2, i, tau_1):
    '''
    See ref**2 pg 4, eq (5)
    '''
    return x-x1[i]+tau_1+sum(x2[j]-x1[j] for j in range(i))
    
def get_n(vxi, vp):
    '''
    Function to obtain m^{i} = len(xi)-p^{i}-1 when we are considering Rational
    multi-degree B-splines
    '''
    return [len(vxi[i])-vp[i]-1 for i in range(len(vp))]

def mu_i(vn, i):
    '''
    Function to obtain the cumulative local dimension
    See ref**2 pg 4
    '''
    return 0 if i == 0 else sum(vn[j] for j in range(i))

def get_tau(x1, x2, tau_1):
    '''
    Function to compute phi^{i}(x_{1}^{i}) and phi^{i}(x_{2}^{i}) for i=1,...,m.
    See ref**2 pg 5, eq (7), (8) and (9)
    '''
    vtau_1 = [phi_i(x1[i], x1, x2, i, tau_1) for i in range(len(x1))]
    vtau_2 = [phi_i(x2[i], x1, x2, i, tau_1) for i in range(len(x2))]
    return vtau_1, vtau_2

def s_b_mu(x, p, x_i_1, x_i, w, q):
    '''
    Function to compute B_{j}^{i} in the definition of the global Bernstein basis
    See ref**2 pg 12, Definition 4.3
    '''
    if (x_i_1 <= x <= x_i):
        return G_B_S_Trig(x, p, q, x_i_1, x_i, w)
    else:
        return 0

def D_s_b_mu(k, x, p, x_i_1, x_i, w, q, eps):
    '''
    Function to compute one element in the column vector A_{rho}(A) 
    in the Theorem of Bezier Extraction
    See ref**2 pg 17, Theorem 6.2
    '''
    if (x_i_1 <= x <= x_i):
        return k_th_diff_G_B_S(k, x, p, q, x_i_1, x_i, w, eps)
    else:
        return 0

def get_matrix_b_mu(vp, Delta, tau_1, vw, lt):
    '''
    Generate a Matrix in whic every row is b_{\mu_{i-1}+j}(phi_{x}) 
    evaluate in [x1[0],x2[m-1]]. Also return the vector [t1,t2] which 
    the same number of elements than a row of the matrix Mb
    '''
    m = len(vp)
    assert m > 1, 'Use plot_algebraic_B_Spline for a partition without breakpoints'
    x1 = [Delta[i] for i in range(len(Delta)-1)]
    x2 = [Delta[i] for i in range(1,len(Delta))]
    vtau_1, vtau_2 = get_tau(x1, x2, tau_1)
    ct = []
    Mb = []
    for i in range(m):
        xc = np.linspace(x1[i], x2[i], lt, endpoint=True)
        for x in xc:
            ct.append(phi_i(x, x1, x2, i, tau_1))
    for i in range(m):
        for q in range(vp[i]+1):
            ptc = []
            for k in range(m):
                xc = np.linspace(x1[k], x2[k], lt, endpoint=True)
                if (k == i):
                    for x in xc:
                        ptc.append(s_b_mu(x, vp[k], x1[k], x2[k], vw, q))
                else: 
                    for x in xc:
                        ptc.append(0)
            Mb.append(ptc)
    return np.array(Mb), ct

    
def plott_CB(vp, Delta, tau_1, vw, lt, r, eps):
    '''
    Function that plot the GTB-spline basis.
    '''
    A_r = A_rho_B(vp, r, vw, eps, Delta)
    C = Extraction_Operator(A_r)
    # C = M_almost_zero(C1)
    Bb, ct = get_matrix_b_mu(vp, Delta, tau_1, vw, lt)
    N = C.dot(Bb)
    nr, nc = N.shape
    for i in range(nr):
        plt.plot(ct, N[i,:])
    plt.show()

def plot_s_b_mu(vp, Delta, tau_1, vw, lt):
    '''
    Generate a Matrix in whic every row is b_{\mu_{i-1}+j}(phi_{x}) 
    evaluate in [x1[0],x2[m-1]]. Also return the vector [t1,t2] which 
    the same number of elements than a row of the matrix Mb, and plot it.
    '''
    m = len(vp)
    assert m > 1, 'Use plot_algebraic_B_Spline for a partition without breakpoints'
    x1 = [Delta[i] for i in range(len(Delta)-1)]
    x2 = [Delta[i] for i in range(1,len(Delta))]
    vtau_1, vtau_2 = get_tau(x1, x2, tau_1)
    ct = []
    for i in range(m):
        xc = np.linspace(x1[i], x2[i], lt, endpoint=True)
        for x in xc:
            ct.append(phi_i(x, x1, x2, i, tau_1))
    for i in range(m):
        for q in range(vp[i]+1):
            ptc = []
            for k in range(m):
                xc = np.linspace(x1[k], x2[k], lt, endpoint=True)
                if (k == i):
                    for x in xc:
                        ptc.append(s_b_mu(x, vp[k], x1[k], x2[k], vw[k], q))
                else: 
                    for x in xc:
                        ptc.append(0)
            plt.plot(ct, ptc)
    plt.show()    

def plot_D_s_b_mu(kk, vp, Delta, tau_1, vw, lt, eps):
    '''
    Generate a Matrix in whic every row is b_{\mu_{i-1}+j}(phi_{x}) 
    evaluate in [x1[0],x2[m-1]]. Also return the vector [t1,t2] which 
    the same number of elements than a row of the matrix Mb, and plot it.
    '''
    m = len(vp)
    assert m > 1, 'Use plot_algebraic_B_Spline for a partition without breakpoints'
    x1 = [Delta[i] for i in range(len(Delta)-1)]
    x2 = [Delta[i] for i in range(1,len(Delta))]
    vtau_1, vtau_2 = get_tau(x1, x2, tau_1)
    ct = []
    for i in range(m):
        xc = np.linspace(x1[i], x2[i], lt, endpoint=True)
        for x in xc:
            ct.append(phi_i(x, x1, x2, i, tau_1))
    for i in range(m):
        for q in range(vp[i]+1):
            ptc = []
            for k in range(m):
                xc = np.linspace(x1[k], x2[k], lt, endpoint=True)
                if (k == i):
                    for x in xc:
                        ptc.append(D_s_b_mu(kk, x, vp[k], x1[k], x2[k], vw, q, eps))
                else: 
                    for x in xc:
                        ptc.append(0)
            plt.plot(ct, ptc)
    plt.show() 
    
def nullspace(a):
    '''
    Nullspace computation of a smoothness constraint based on knot insertion, 
    see Book**1 Algorithm 6.1.
    '''
    n = len(a)
    # print(n)
    C_tilde = np.zeros((n-1,n), dtype = np.float64)
    # print(n-1,n)
    k = 0
    # while (k < (n - 1)) and (isclose(a[k], 0, abs_tol=1e-7) == False):
    while (k < (n - 1)) and (abs(a[k]) <= 1e-8):
        C_tilde[k,k] = 1
        k = k + 1
        # print(k)
    # print(k)
    C_tilde[k,k] = 1
    # print(k)
    while ((k + 1) < (n-1)) and (abs(a[k + 1]) >= 1e-8):
        # print('here')
        C_tilde[k, k + 1] = -C_tilde[k,k]*a[k]/a[k+1]
        # print(C_tilde[k, k + 1])
        C_tilde[k + 1, k + 1] = 1 - C_tilde[k, k + 1]
        k = k + 1
    while (k < (n - 1)):
        C_tilde[k, k + 1] = 1
        k = k + 1
    return C_tilde

def CA_rho_B(x, vp, i_B, j_B, x_i_1, x_i, x_l_1, w, eps):
    '''
    Function to build one column of the input matrix for the Generalized Bezier extraction
    See ref**1, pg 17, Theorem 6.2
    '''
    m = len(vp)
    theta = sum((vp[i] + 1) for i in range(m))
    B = np.zeros(theta)
    for i in range(m):
        for q in range(vp[i]+1):
            ind = sum((vp[k] + 1) for k in range(i)) + q 
            # print(ind)  jump_xi_k(k, x, q, j, x_i_1, x_i, w, eps)
            if (i == i_B): 
                # print('1', i, vp[i], q, x_i_1, x_i_1)
                B[ind] = jump_xi_k(j_B, x, vp[i], q, x_i_1, x_i, w, eps)
            elif (i == i_B-1):
                B[ind] = jump_xi_k(j_B, x, vp[i], q, x_l_1, x_i_1, w, eps)
            else:
                B[ind] = 0
    return B

def M_almost_zero(M):
    r, c = M.shape
    N = np.zeros((r,c))
    for i in range(r):
        for j in range(c):
            if (abs(M[i,j]) <= 1e-8):
                N[i,j] = 0
            else:
                N[i,j] = M[i,j]
    return N
            
def A_rho_B(vp, r, w, eps, Delta):
    '''
    Function to build the input matrix for the Generalized Bezier extraction
    See ref**1, pg 17, Theorem 6.2
    '''
    m = len(vp)
    # ind = sum((r[k] + 1) for k in range(1, m- 1)) + r[m-1] + 1
    # A_r = np.empty(ind)
    # for i_B in range(1,m):
    #     for j_B in range(r[i_B] + 1):
    #         np.concatenate((A_r, CA_rho_B(Delta[i_B], vp, i_B, j_B, Delta[i_B], Delta[i_B+1], w, eps)), axis=1)
    A_r = []
    for i_B in range(1,m):
        for j_B in range(r[i_B] + 1):
            A_r.append(CA_rho_B(Delta[i_B], vp, i_B, j_B, Delta[i_B], Delta[i_B+1], Delta[i_B-1], w, eps))
            # print(CA_rho_B(Delta[i_B], vp, i_B, j_B, Delta[i_B], Delta[i_B+1], Delta[i_B-1], w, eps))
    return np.array(A_r).T

def Extraction_Operator(A_r):
    '''
    Function to calculate Generalized Bezier extraction
    See ref**1, pg 18, Algorithm 6.2
    '''
    rAr, cAr = A_r.shape
    C = np.eye(rAr)
    for rho in range(cAr):
        C_tilde = nullspace(A_r[:,rho])
        # C_tilde = M_almost_zero(C_tilde1)
        # print(rho, C_tilde)
        C = C_tilde.dot(C)
        # C = M_almost_zero(C1)
        A_r = C_tilde.dot(A_r)
    return C
        

'''Trying to program the MultiDegree Trigonometric Splines'''
vp = [2,3,4]
Delta = [0,1,5/2,5]
r = [-1,2,2,-1]
tau_1 = 0
vw = np.pi/2
lt = 10
eps = 1/10**7
plott_CB(vp, Delta, tau_1, vw, lt, r, eps)
